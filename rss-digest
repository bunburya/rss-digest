#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import argparse

from rss_digest.cli import CLI
from rss_digest.rss_digest import RSSDigest

COMMANDS = [
    'profiles',
    'add-profile',
    'view-profile',
    'edit-profile',
    'delete-profile',
    'add-feed',
    'view-feeds',
    'delete-feed'
    'run'
]

OUTPUT_METHODS = [
    'stdout',
    'smtp',
    'sendmail',
    'file'
]


def get_arg_parser(cli: CLI) -> argparse.ArgumentParser:

    parser = argparse.ArgumentParser(description='Send an email digest of subscribed RSS feeds.')
    subparsers = parser.add_subparsers()

    profiles_parser = subparsers.add_parser('list-profiles', description='View the list of available profiles.')
    profiles_parser.set_defaults(func=cli.list_profiles)

    add_profile_parser = subparsers.add_parser('add-profile', description='Add a new profile.')
    add_profile_parser.add_argument('profile_name', metavar='profile-name', help='The name of the profile.')
    add_profile_parser.add_argument('email', help='The email address for the profile.')
    add_profile_parser.add_argument('--user-name', help='The name of the user of the profile (which will be used in '
                                                        'the email, for example). If not provided, defaults to the '
                                                        'profile name.')
    add_profile_parser.set_defaults(func=cli.add_profile)

    view_profile_parser = subparsers.add_parser('view-profile', description='View the details of a given profile.')
    view_profile_parser.add_argument('profile_name', metavar='profile-name', help='Name of profile to view.')
    view_profile_parser.set_defaults(func=cli.view_profile)

    edit_profile_parser = subparsers.add_parser('edit-profile', description='Edit the details of a given profile.')
    edit_profile_parser.add_argument('profile-name', metavar='profile_name', help='Name of profile to edit.')
    edit_profile_parser.add_argument('--email', help='New email address.')
    edit_profile_parser.add_argument('--user-name', help='New user name.')
    edit_profile_parser.set_defaults(func=cli.edit_profile)

    delete_profile_parser = subparsers.add_parser('delete-profile', description='Delete the given profile.')
    delete_profile_parser.add_argument('profile_name', metavar='profile-name', help='Name of profile to delete.')
    delete_profile_parser.set_defaults(func=cli.delete_profile)

    add_feed_parser = subparsers.add_parser('add-feed', description='Add a feed.')
    add_feed_parser.add_argument('profile_name', metavar='profile-name', help='Name of profile.')
    add_feed_parser.add_argument('url', help='URL of RSS feed.')
    add_feed_parser.add_argument('--category', help='(Optional) category in which to include feed.')
    add_feed_parser.add_argument('--name', help='(Optional) name of feed.')
    add_feed_parser.add_argument('--fetch-name', action='store_true',
                                 help='If provided, the name of the feed will be fetched from the provided URL. '
                                      'Overrides --name and --test.')
    add_feed_parser.add_argument('--test', action='store_true', help='If provided, the provided URL will be requested '
                                                                     'to ensure that it is a valid feed.')
    add_feed_parser.set_defaults(func=cli.add_feed)

    run_parser = subparsers.add_parser('run', description='Run rss-digest.')
    run_parser.add_argument('profile_name', metavar='profile-name', help='Name of profile to run.')
    run_parser.add_argument('output_format', metavar='output-format', default='text',
                            help='Output format for digest. Defaults to "text".')
    run_parser.add_argument('output_method', metavar='output-method', choices=OUTPUT_METHODS, default='stdout',
                            help='How rss-digest should send the generated digest. Defaults to "stdout".')

    return parser

def main():
    cli = CLI()
    parser = get_arg_parser(cli)
    parser.parse_args(sys.argv[1:])
    
if __name__ == '__main__':
    
    main()
